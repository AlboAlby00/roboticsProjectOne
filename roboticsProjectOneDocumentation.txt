Miriam Di Napoli 10720326
Matteo Delpini   10658676
Alberto Confente 10676663

Brief description of the files

-Compute_odometry : In this file is implemented the class OdometryNode. The Node OdometryNode subscribes to the topic wheel_states and publishes in two topics cmd_vel and odom.
	On the topic wheel_states are published messages of type sensor_msgs/JointState and they represents encoder messages containing RPM and ticks for the 4 wheels. From the messages the OdometryNode computes the linear and angular velocity which are then published in the topic cmd_vel as type geometry_msgs/TwistStamped. 
	The node then computes the odometry using linear and angular velocity and publish it in topic odom of 
	with messages of type nav_msgs/Odometry. The odometry can be calculated with Euler or Runge-Kutta integration and the type of integration is a parameter set via dynamic reconfiguration.  
	There are also present two services:
	one(srv_reset_odometry) is responsible for the reset of the odometry to any given pose, 
        the other (set_compute_control_param) sets "r" param (with its only argument) inside node"compute_control". 
	this service is called in node "compute_odometry" in dynServer callback in order to keep r variable consistent in the two nodes.


-compute_control : In this file is implemented the Class ComputeControl. ComputeControl subscribes to cmd_vel and publishes in wheels_rpm.
	The topic cmd_vel is the topic where the node OdometryNode publishes the angular and linear velocity, ComputeControl reads the messages published and computes the wheel speed and publishes it as custom messages in topic wheels_rpm. The node does this so that can be checked the results with the originals encoders values.

-broadcaster_tf2 : Node subscribed to "odom" topic, it computes tf from reference frame "odom" to reference frame "base_link" and publishes it on topic "tf"

-static_tf_broadcaster: In this file is implemented the class StaticBroadcaster. It subscribes to the topic robot/pose and computes the static tf from "world" to "odom" based on the first value of the topic (which is the initial position of the robot when the bag was recorded).

-odometryIntegration : This file defines the parameters changed dynamically. In this case there are:
 an Enum with two values (euler and runge-kutta), a double r which represents the robot wheel radius and a double N which represents the robot CPR  

-launch: this file generates the three nodes and defines all the parameters.


Name and meaning of the ROS parameters
    r which represents the wheel radius
    lx which represents the wheel position along the axis x
    ly which represents the wheel position along the axis y
    T which represents the Gear ratio 
    N which represents the encoders resolution

    x0  represents the initial position along the axis x
    y0 	represents the initial position along the axis y
    theta0 represents the initial  angulation


structure of the TF tree 

world -> odom -> base_lnk



structure of any custom message
this is the structure of the custom message 
Header header
float64 rpm_fl
float64 rpm_fr
float64 rpm_rr
float64 rpm_rl
It can be tested if ROS finds the new message calling: rosmsg show roboticsProjectOne/WheelSpeeds
 


The nodes can be started all together writing roslaunch robotics_project_one launcher.launch because in the file launcher are all the commands to start each node. Then the bag can be started with the command rosbag play "nameofthebag".

The type of integration can be chosen dinamically with the following commands: 
rosrun dynamic_reconfigure dynparam list to show the list of nodes that can be reconfigured dinamically, in our project OdometryNode, and rosrun dynamic_reconfigure dynparam set OdometryNode value (where value is the value we choose) to set the new parameter. 

A service can be called with the command rosservice call /service_name service-args where service_name is the name of the service and service-args are the arguments needed by the service. In our project for example rosservice call /srv_reset_odometry service-args 0 0 0 would reset the odometry to its initial position.





